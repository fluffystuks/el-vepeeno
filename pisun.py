import os
import requests
import asyncio
import json
import uuid
import random
import string
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv
import time
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
API_URL = "http://109.120.184.34:57189"
USERNAME = os.getenv("API_USERNAME")
PASSWORD = os.getenv("API_PASSWORD")
SESSION_KEY = None
ALLOWED_USERS = set(map(int, os.getenv("ALLOWED_USERS", "").split(',')))

bot = Bot(token=TOKEN)
dp = Dispatcher()

def generate_random_string(length=6):
    return ''.join(random.choices(string.ascii_uppercase, k=length))

def generate_client():
    return {
        "id": str(uuid.uuid4()),  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π UUID
        "flow": "",
        "email": f"Finland({generate_random_string(6)})",  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email
        "limitIp": 0,
        "totalGB": 0,
        "expiryTime": 0,
        "enable": True,
        "tgId": "",
        "subId": generate_random_string(12),  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π subId
        "reset": 0
    }

async def login():
    global SESSION_KEY
    try:
        response = requests.post(f"{API_URL}/login", data={"username": USERNAME, "password": PASSWORD})
        if response.status_code == 200 and response.json().get("success"):
            SESSION_KEY = response.cookies.get("3x-ui")
            if SESSION_KEY:
                print("‚úÖ –°–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
            else:
                print("‚ö†Ô∏è –°–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ cookies.")
        else:
            print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.json()}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {e}")

def get_client_link(client_id,user_id: str):
    return f"vless://{client_id}@109.120.184.34:433?type=tcp&security=reality&pbk=eFC-ougLLf7VNPSagv1C1CHP8jBGvzVSGLmfww-9Cyg&fp=firefox&sni=www.ign.com&sid=14b4b5a9cbd5&spx=%2F#Buyers-{user_id}"

@dp.message(Command("generate"))

async def generate_key(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not SESSION_KEY:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    client = generate_client()
    client_id = client.get('id')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞ (—á–µ—Ä–µ–∑ 3 –¥–Ω—è)
    expiry_datetime = datetime.utcnow() + timedelta(days=3, hours=3)  # UTC +3 —á–∞—Å–∞
    expiry_timestamp = int(expiry_datetime.timestamp() * 1000)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    client["expiryTime"] = expiry_timestamp  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∏–µ–Ω—Ç–∞

    expiry_str = expiry_datetime.strftime("%d-%m-%Y %H:%M")  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞

    payload = {
        "id": 2,
        "settings": json.dumps({"clients": [client]})
    }

    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Cookie": f"3x-ui={SESSION_KEY}"
    }

    try:
        response = requests.post(
            f"{API_URL}/panel/api/inbounds/addClient",
            json=payload,
            headers=headers
        )
        if response.status_code == 200 and response.json().get("success"):
            user_id = client['email']
            link = get_client_link(client_id, user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –∫–ª—é—á–∞
            if link:
                await message.answer(
                    f"üîë –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"üìß Email: {user_id}\n"
                    f"‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expiry_str}\n\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {link}"
                )
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–ª—é—á–∞.")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞. –û—Ç–≤–µ—Ç API: {response.text}")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API")
        print(f"–û—à–∏–±–∫–∞: {e}")

async def main():
    await login()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
