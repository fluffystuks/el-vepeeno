# services/admin_panel.py
import asyncio
import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
from config import ADMIN_TG_ID
from db import DB_NAME

# --- —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞ ---
WAITING_MESSAGE = 1
WAITING_TARGET = 2

# --- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def _is_admin(user_id: int) -> bool:
    return str(user_id) == str(ADMIN_TG_ID)

def _get_all_users():
    """tg_id –≤—Å–µ—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users"""
    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        cur.execute("SELECT tg_id FROM users WHERE tg_id IS NOT NULL")
        return [row[0] for row in cur.fetchall()]

def _get_active_users():
    """tg_id –≤—Å–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á"""
    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT DISTINCT u.tg_id
            FROM users u
            JOIN keys k ON u.id = k.user_id
            WHERE k.active = 1 AND u.tg_id IS NOT NULL
        """)
        return [row[0] for row in cur.fetchall()]

# --- /admin ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not _is_admin(user_id):
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return ConversationHandler.END

    await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:")
    return WAITING_MESSAGE


# --- —à–∞–≥ 1: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
async def handle_message_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return WAITING_MESSAGE

    context.user_data["broadcast_text"] = text
    kb = [
        [InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–µ—Å—Ç—å –∫–ª—é—á)", callback_data="target:active")],
        [InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∏–∑ users)", callback_data="target:all")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="target:cancel")],
    ]
    await update.message.reply_text(
        "üì£ –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return WAITING_TARGET


# --- —à–∞–≥ 2: –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ ---
async def choose_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if not _is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return ConversationHandler.END

    data = query.data
    text = context.user_data.get("broadcast_text", "")
    if data == "target:cancel":
        await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    if data == "target:active":
        targets = _get_active_users()
        group = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏"
    elif data == "target:all":
        targets = _get_all_users()
        group = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    else:
        return ConversationHandler.END

    context.user_data["broadcast_targets"] = targets

    kb = [
        [InlineKeyboardButton("üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="target:send")],
        [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="target:cancel")],
    ]
    await query.edit_message_text(
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ {group}.\n\n"
        f"–¢–µ–∫—Å—Ç:\n{text}",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return WAITING_TARGET


# --- —à–∞–≥ 3: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ ---
async def perform_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if not _is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return ConversationHandler.END

    targets = context.user_data.get("broadcast_targets", [])
    text = context.user_data.get("broadcast_text", "")
    if not targets or not text:
        await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return ConversationHandler.END

    await query.edit_message_text("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    sent, failed = 0, 0
    for tg in targets:
        try:
            await context.bot.send_message(chat_id=tg, text=text)
            sent += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {tg}: {e}")
            failed += 1
        await asyncio.sleep(0.05)  # –Ω–µ —Å–ø–∞–º–∏–º

    await context.bot.send_message(
        chat_id=user_id,
        text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}"
    )
    return ConversationHandler.END