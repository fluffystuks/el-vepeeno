import json
import os
import requests
import uuid
import random
import string
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, MenuButtonCommands
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "users.json"

# API 3x-ui
API_URL = "http://109.120.184.34:57189"
USERNAME = os.getenv("API_USERNAME")
PASSWORD = os.getenv("API_PASSWORD")
SESSION_KEY = None

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_user_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ balance, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            for user_id in data:
                if "balance" not in data[user_id]:
                    data[user_id]["balance"] = 0
            return data
    return {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_user_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_data = load_user_data()

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏–Ω–∞ –≤ API
def login():
    global SESSION_KEY
    try:
        response = requests.post(f"{API_URL}/login", data={"username": USERNAME, "password": PASSWORD})
        if response.status_code == 200 and response.json().get("success"):
            SESSION_KEY = response.cookies.get("3x-ui")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {e}")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
def generate_random_string(length=6):
    return ''.join(random.choices(string.ascii_uppercase, k=length))

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
def generate_client():
    return {
        "id": str(uuid.uuid4()),
        "flow": "",
        "email": f"Finland({generate_random_string(6)})",
        "limitIp": 0,
        "totalGB": 0,
        "expiryTime": 0,
        "enable": True,
        "tgId": "",
        "subId": generate_random_string(12),
        "reset": 0
    }

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–ª—é—á
def get_client_link(client_id, user_id: str):
    return f"vless://{client_id}@109.120.184.34:433?type=tcp&security=reality&pbk=eFC-ougLLf7VNPSagv1C1CHP8jBGvzVSGLmfww-9Cyg&fp=firefox&sni=www.ign.com&sid=14b4b5a9cbd5&spx=%2F#Buyers-{user_id}"

def generate_key(user_id, duration_days):
    if not SESSION_KEY:
        return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API."

    client = generate_client()
    client_id = client.get('id')

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –±–µ–∑ —É—á–µ—Ç–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    utc_now = datetime.utcnow()
    expiry_datetime = utc_now + timedelta(days=duration_days, hours=3)
    
    expiry_timestamp = int(expiry_datetime.timestamp() * 1000)
    client["expiryTime"] = expiry_timestamp

    payload = {
        "id": 2,
        "settings": json.dumps({"clients": [client]})
    }

    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Cookie": f"3x-ui={SESSION_KEY}"
    }

    try:
        response = requests.post(f"{API_URL}/panel/api/inbounds/addClient", json=payload, headers=headers)
        if response.status_code == 200 and response.json().get("success"):
            link = get_client_link(client_id, client['email'])
            
            if user_id not in user_data:
                user_data[user_id] = {}

            user_data[user_id].update({
                "email": client['email'],
                "expiryTime": expiry_datetime.strftime("%d-%m-%Y %H:%M"),
                "trial_used": user_data[user_id].get("trial_used", False),
                "key": link
            })
            save_user_data(user_data)

            return f"üìß Email: {client['email']}\nüîë –ö–ª—é—á: {link}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {response.text}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}"

async def set_bot_commands(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])

async def post_init(application: Application):
    await application.bot.set_my_commands([
        ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        ("pay", "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        ("balance", "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å")
    ])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"
    await application.bot.set_chat_menu_button(menu_button=MenuButtonCommands())


async def pay(update, context):
    text = (
        "üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–∞–ª—å—Ç–æ –∏ –Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥ –ø–æ–¥—É—à–∫—É:\n"
        "üëâ +7 (XXX) XXX-XX-XX\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ —Å—é–¥–∞: [@othrwise](https://t.me/othrwise).\n"
        "–ú—ã –∑–∞—á–∏—Å–ª–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."
    )
    
    await update.message.reply_text(text, parse_mode="Markdown")

async def balance(update, context):
    user_id = str(update.message.from_user.id)
    
    if user_id not in user_data:
        user_data[user_id] = {"balance": 0}
        save_user_data(user_data)
    
    balance_amount = user_data[user_id].get("balance", 0)
    
    text = (
        "üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n"
        f"{balance_amount} —Ä—É–±–ª–µ–π\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay."
    )
    
    await update.message.reply_text(text, parse_mode="Markdown")

async def start(update, context):
    keyboard = [
        [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data='connect')],
        [InlineKeyboardButton("üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", callback_data='instruction')],
        [InlineKeyboardButton("üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data='account')],
        [InlineKeyboardButton("ü§ì–ü–æ–º–æ—â—å", callback_data='help')],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* üåü\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:\n"
    )
    
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")

async def handle_instruction(update, context):
    await update.callback_query.answer()
    text = (
        "üìú *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:*\n\n"
        "üëâ [–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è](https://telegra.ph/Instrukciya-po-ispolzovaniyu-klyucha-BLESS-01-30)"
    )
    
    await update.callback_query.edit_message_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([ 
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )

async def handle_connect(update, context):
    user_id = str(update.callback_query.from_user.id)
    trial_disabled = user_data.get(user_id, {}).get("trial_used", False)

    keyboard = [
        [InlineKeyboardButton("üÜì –ü—Ä–æ–±–Ω—ã–π - 3 –¥–Ω—è", callback_data='trial')] if not trial_disabled else [],
        [InlineKeyboardButton("üí≥ 100 —Ä—É–±–ª–µ–π - 1 –º–µ—Å—è—Ü", callback_data='100rub')],
        [InlineKeyboardButton("üí≥ 250 —Ä—É–±–ª–µ–π - 3 –º–µ—Å—è—Ü–∞", callback_data='250rub')],
        [InlineKeyboardButton("üí≥ 500 —Ä—É–±–ª–µ–π - 6 –º–µ—Å—è—Ü–µ–≤", callback_data='500rub')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')],
    ]
    
    keyboard = [row for row in keyboard if row]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*"

    )
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")

async def handle_tariff(update, context):
    query = update.callback_query
    user_id = str(query.from_user.id)
    choice = query.data

    if user_id not in user_data:
        user_data[user_id] = {"balance": 0}
        save_user_data(user_data)

    if choice == 'trial':
        if user_data[user_id].get("trial_used", False):
            await query.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!", show_alert=True)
            return
        
        user_data[user_id]["trial_used"] = True
        save_user_data(user_data)

        # –î–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è - 3 –¥–Ω—è
        key_info = generate_key(user_id, duration_days=3)  # –ü–µ—Ä–µ–¥–∞–µ–º 3 –¥–Ω—è –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        key = user_data[user_id].get("key", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

        text = (
            "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.* üéâ\n\n"
            f" *–í–∞—à –∫–ª—é—á:*\n`{key}`\n\n"
            "\n*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã –µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å*\n\n"
            "üìù *–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?*\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streisand - –µ—Å–ª–∏ —É –í–∞—Å IOS. Hiddify,V2RayNG - –ï—Å–ª–∏ —É –í–∞—Å Android.\n"
            "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á*.\n"
            "3. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –∏ –Ω–∞–∂–º–∏—Ç–µ *–ü–æ–¥–∫–ª—é—á–∏—Ç—å*.\n"
            "4. –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—â–∏—â–µ–Ω—ã. üõ°Ô∏è\n\n"
            "‚è≥ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:* 3 –¥–Ω—è\n\n"
            "üìú –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–∞–∑–¥–µ–ª–æ–º *–ü–æ–º–æ—â—å*."
        )

        await query.edit_message_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", callback_data='instruction')],
                [InlineKeyboardButton("ü§ì –ü–æ–º–æ—â—å", callback_data='help')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )
    
    elif choice == '100rub':
        if user_data[user_id].get("balance", 0) < 100:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /pay.", show_alert=True)
            return
        
        user_data[user_id]["balance"] -= 100
        save_user_data(user_data)

        # –î–ª—è —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 1 –º–µ—Å—è—Ü —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è - 30 –¥–Ω–µ–π
        key_info = generate_key(user_id, duration_days=30)  # –ü–µ—Ä–µ–¥–∞–µ–º 30 –¥–Ω–µ–π –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 1 –º–µ—Å—è—Ü
        key = user_data[user_id].get("key", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        text = (
            "üéâ *–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–∞ 1 –º–µ—Å—è—Ü!* üéâ\n\n"
            f"üîë *–í–∞—à –∫–ª—é—á:*\n`{key}`\n\n"
            "\n*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã –µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å*\n\n"
            "üìù *–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?*\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streisand - –µ—Å–ª–∏ —É –í–∞—Å IOS. Hiddify,V2RayNG - –ï—Å–ª–∏ —É –í–∞—Å Android .\n"
            "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á*.\n"
            "3. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –∏ –Ω–∞–∂–º–∏—Ç–µ *–ü–æ–¥–∫–ª—é—á–∏—Ç—å*.\n"
            "4. –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—â–∏—â–µ–Ω—ã. üõ°Ô∏è\n\n"
            "‚è≥ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞:* 1 –º–µ—Å—è—Ü\n\n"
            "üìú –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–∞–∑–¥–µ–ª–æ–º *–ü–æ–º–æ—â—å*."
        )
        await query.edit_message_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", callback_data='instruction')],
                [InlineKeyboardButton("ü§ì –ü–æ–º–æ—â—å", callback_data='help')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )

    elif choice == '250rub':
        if user_data[user_id].get("balance", 0) < 250:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /pay.", show_alert=True)
            return
        
        user_data[user_id]["balance"] -= 250
        save_user_data(user_data)

   
        key_info = generate_key(user_id, duration_days=90) 
        key = user_data[user_id].get("key", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

        text = (
            "üéâ *–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–∞ 3 –º–µ—Å—è—Ü–∞!* üéâ\n\n"
            f"üîë *–í–∞—à –∫–ª—é—á:*\n`{key}`\`n\n"
            "\n*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã –µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å*\n\n"
            "üìù *–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?*\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streisand - –µ—Å–ª–∏ —É –í–∞—Å IOS. Hiddify,V2RayNG - –ï—Å–ª–∏ —É –í–∞—Å Android .\n"
            "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á*.\n"
            "3. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –∏ –Ω–∞–∂–º–∏—Ç–µ *–ü–æ–¥–∫–ª—é—á–∏—Ç—å*.\n"
            "4. –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—â–∏—â–µ–Ω—ã. üõ°Ô∏è\n\n"
            "‚è≥ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞:* 3 –º–µ—Å—è—Ü–∞\n\n"
            "üìú –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–∞–∑–¥–µ–ª–æ–º *–ü–æ–º–æ—â—å*."
        )
        
        await query.edit_message_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", callback_data='instruction')],
                [InlineKeyboardButton("ü§ì –ü–æ–º–æ—â—å", callback_data='help')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )

    elif choice == '500rub':
        if user_data[user_id].get("balance", 0) < 500:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /pay.", show_alert=True)
            return
        
        user_data[user_id]["balance"] -= 500
        save_user_data(user_data)

        # –î–ª—è —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è - 180 –¥–Ω–µ–π
        key_info = generate_key(user_id, duration_days=180)  # –ü–µ—Ä–µ–¥–∞–µ–º 180 –¥–Ω–µ–π –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤
        key = user_data[user_id].get("key", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

        text = (
            "üéâ *–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤!* üéâ\n\n"
            f"üîë *–í–∞—à –∫–ª—é—á:*\n`{key}`\n\n"
            "\n*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã –µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å*\n\n"
            "üìù *–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?*\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streisand - –µ—Å–ª–∏ —É –í–∞—Å IOS. Hiddify,V2RayNG - –ï—Å–ª–∏ —É –í–∞—Å Android .\n"
            "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á*.\n"
            "3. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –∏ –Ω–∞–∂–º–∏—Ç–µ *–ü–æ–¥–∫–ª—é—á–∏—Ç—å*.\n"
            "4. –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—â–∏—â–µ–Ω—ã. üõ°Ô∏è\n\n"
            "‚è≥ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞:* 6 –º–µ—Å—è—Ü–µ–≤\n\n"
            "üìú –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–∞–∑–¥–µ–ª–æ–º *–ü–æ–º–æ—â—å*."
        )
        
        await query.edit_message_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", callback_data='instruction')],
                [InlineKeyboardButton("ü§ì –ü–æ–º–æ—â—å", callback_data='help')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )
    
    elif choice == 'back':
        await query.answer()
        await start(update, context)

async def handle_help(update, context):
    await update.callback_query.answer()
    text = (
        " *–ü–æ–º–æ—â—å*\n\n"
        "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É:\n"
        "[@othrwise](https://t.me/othrwise)\n\n"
        "_–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!_ üòä"
    )
    
    await update.callback_query.edit_message_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )

async def handle_account(update, context):
    user_id = str(update.callback_query.from_user.id)

    if user_id not in user_data or "email" not in user_data[user_id]:
        await update.callback_query.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!", show_alert=True)
        return

    user_email = user_data[user_id]["email"]
    expiry_time = user_data[user_id].get("expiryTime", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    key_link = user_data[user_id].get("key", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    user_balance = user_data[user_id].get("balance", 0)

    text = (
        "üë§ *–í–∞—à –∞–∫–∫–∞—É–Ω—Ç*\n\n"
        f"üìß *Email:* `{user_email}`\n"
        f"‚è≥ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* `{expiry_time}`\n"
        f"üîë *–í–∞—à –∫–ª—é—á:*\n `{key_link}` \n\n"
        "*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã –µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å*\n"
        f"üí∞ *–ë–∞–ª–∞–Ω—Å:* `{user_balance} —Ä—É–±–ª–µ–π`\n\n"
        "_–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏._\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–∞–∑–¥–µ–ª–æ–º *–ü–æ–º–æ—â—å*."
    )
    
    await update.callback_query.edit_message_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ü§ì –ü–æ–º–æ—â—å", callback_data='help')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )

def main():
    TOKEN = '7618148235:AAFGTnPyYnPf82EPGoYocndpXMl12yRYpVw'

    application = Application.builder().token(TOKEN).post_init(post_init).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("pay", pay))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CallbackQueryHandler(handle_connect, pattern='^connect$'))
    application.add_handler(CallbackQueryHandler(handle_tariff, pattern='^(trial|100rub|250rub|500rub|back)$'))
    application.add_handler(CallbackQueryHandler(handle_help, pattern='^help$'))
    application.add_handler(CallbackQueryHandler(handle_instruction, pattern='^instruction$'))
    application.add_handler(CallbackQueryHandler(handle_account, pattern='^account$'))

    login()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()