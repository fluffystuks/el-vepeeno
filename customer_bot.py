import json
import os
import requests
import uuid
import random
import string
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "users.json"

# API 3x-ui
API_URL = "http://109.120.184.34:57189"
USERNAME = os.getenv("API_USERNAME")
PASSWORD = os.getenv("API_PASSWORD")
SESSION_KEY = None

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_user_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_user_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_data = load_user_data()

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏–Ω–∞ –≤ API
def login():
    global SESSION_KEY
    try:
        response = requests.post(f"{API_URL}/login", data={"username": USERNAME, "password": PASSWORD})
        if response.status_code == 200 and response.json().get("success"):
            SESSION_KEY = response.cookies.get("3x-ui")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {e}")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
def generate_random_string(length=6):
    return ''.join(random.choices(string.ascii_uppercase, k=length))

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
def generate_client():
    return {
        "id": str(uuid.uuid4()),
        "flow": "",
        "email": f"Finland({generate_random_string(6)})",
        "limitIp": 0,
        "totalGB": 0,
        "expiryTime": 0,
        "enable": True,
        "tgId": "",
        "subId": generate_random_string(12),
        "reset": 0
    }

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–ª—é—á
def get_client_link(client_id, user_id: str):
    return f"vless://{client_id}@109.120.184.34:433?type=tcp&security=reality&pbk=eFC-ougLLf7VNPSagv1C1CHP8jBGvzVSGLmfww-9Cyg&fp=firefox&sni=www.ign.com&sid=14b4b5a9cbd5&spx=%2F#Buyers-{user_id}"

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
def generate_key(user_id):
    if not SESSION_KEY:
        return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API."

    client = generate_client()
    client_id = client.get('id')

    expiry_datetime = datetime.utcnow() + timedelta(days=3, hours=3)
    expiry_time_str = expiry_datetime.strftime("%Y-%m-%d %H:%M")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM
    client["expiryTime"] = expiry_time_str

    payload = {
        "id": 2,
        "settings": json.dumps({"clients": [client]})
    }

    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Cookie": f"3x-ui={SESSION_KEY}"
    }

    try:
        response = requests.post(f"{API_URL}/panel/api/inbounds/addClient", json=payload, headers=headers)
        if response.status_code == 200 and response.json().get("success"):
            link = get_client_link(client_id, client['email'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º email, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in user_data:
                user_data[user_id] = {}

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            user_data[user_id]["email"] = client['email']
            user_data[user_id]["expiryTime"] = expiry_time_str
            user_data[user_id]["trial_used"] = True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–æ–±–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω

            save_user_data(user_data)

            return f"üîë –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\nüìß Email: {client['email']}\nüîó –°—Å—ã–ª–∫–∞: {link}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {response.text}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}"

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update, context):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data='connect')],
        [InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", callback_data='instruction')],
        [InlineKeyboardButton("–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data='account')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é"
async def handle_instruction(update, context):
    await update.callback_query.answer()
    await update.callback_query.message.edit_text(
        "üìú **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:**\n"
        "üëâ [–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é](https://telegra.ph/Instrukciya-po-ispolzovaniyu-klyucha-BLESS-01-30)",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([ 
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"
async def handle_connect(update, context):
    user_id = str(update.callback_query.from_user.id)
    trial_disabled = user_data.get(user_id, {}).get("trial_used", False)

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–±–Ω—ã–π - 3 –¥–Ω—è", callback_data='trial')] if not trial_disabled else [],
        [InlineKeyboardButton("100 —Ä—É–±–ª–µ–π - 1 –º–µ—Å—è—Ü", callback_data='100rub')],
        [InlineKeyboardButton("500 —Ä—É–±–ª–µ–π - 6 –º–µ—Å—è—Ü–µ–≤", callback_data='500rub')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')],
    ]
    
    keyboard = [row for row in keyboard if row]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
async def handle_tariff(update, context):
    query = update.callback_query
    user_id = str(query.from_user.id)
    choice = query.data

    if user_id not in user_data:
        user_data[user_id] = {}

    if choice == 'trial':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        if user_data[user_id].get("trial_used", False):
            await query.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!", show_alert=True)
            return
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        user_data[user_id]["trial_used"] = True

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        key_info = generate_key(user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users.json
        save_user_data(user_data)

        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ '–ü—Ä–æ–±–Ω—ã–π - 3 –¥–Ω—è'.\n\n{key_info}")
    
    elif choice == '100rub':
        await query.edit_message_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ "100 —Ä—É–±–ª–µ–π - 1 –º–µ—Å—è—Ü".')
    
    elif choice == '500rub':
        await query.edit_message_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ "500 —Ä—É–±–ª–µ–π - 6 –º–µ—Å—è—Ü–µ–≤".')
    
    elif choice == 'back':
        await query.answer()
        await start(query, context)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
async def handle_help(update, context):
    await update.callback_query.answer()
    await update.callback_query.message.edit_text(
        "–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–º–æ—â—å —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Å—é–¥–∞: [@othrwise](https://t.me/othrwise)",
        parse_mode="Markdown"
    )

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ "–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç"
async def handle_account(update, context):
    user_id = str(update.callback_query.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data or "email" not in user_data[user_id]:
        await update.callback_query.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º email –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    user_email = user_data[user_id]["email"]
    expiry_time = user_data[user_id].get("expiryTime", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë –≤ datetime
    if isinstance(expiry_time, str):
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD HH:MM"
            expiry_datetime = datetime.strptime(expiry_time, "%Y-%m-%d %H:%M")
            expiry_time = expiry_datetime.strftime("%d-%m-%Y %H:%M")
        except ValueError:
            expiry_time = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"

    await update.callback_query.message.edit_text(
        f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n\n"
        f"üìß Email: {user_email}\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_time}"
    )



# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    TOKEN = '7618148235:AAFGTnPyYnPf82EPGoYocndpXMl12yRYpVw'
    
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_connect, pattern='^connect$'))
    application.add_handler(CallbackQueryHandler(handle_tariff, pattern='^(trial|100rub|500rub|back)$'))
    application.add_handler(CallbackQueryHandler(handle_help, pattern='^help$'))  
    application.add_handler(CallbackQueryHandler(handle_instruction, pattern='^instruction$')) 
    application.add_handler(CallbackQueryHandler(handle_account, pattern='^account$'))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç"

    login()  # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ API –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    application.run_polling()

if __name__ == '__main__':
    main()
