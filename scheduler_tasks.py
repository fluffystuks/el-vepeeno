# scheduler_tasks.py
from config import ADMIN_TG_ID
import math
from datetime import datetime
from pathlib import Path
import shutil
from db import (
    get_expiring_keys,
    deactivate_key,
    update_notified_level,
    get_all_active_bonuses,
    expire_bonus,
)

async def check_keys_once(context):
    bot = context.bot
    start_msg = f"[{datetime.now().strftime('%H:%M:%S')}] üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π"
    print(start_msg)
    if ADMIN_TG_ID:
        try:
            await bot.send_message(chat_id=ADMIN_TG_ID, text=start_msg)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")

    keys = get_expiring_keys()
    for key in keys:
        try:
            await handle_key_notification(bot, key)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ TG ID {key['tg_id']}: {e}")

async def handle_key_notification(bot, key):
    remaining_sec = key['remaining_seconds']
    days_left = math.ceil(remaining_sec / 86400)
    tg_id = key['tg_id']
    email = key['email']
    key_id = key['key_id']
    notified_level = key.get("notified_level", 0)

    messages = {
        7: (
            "üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:*\n\n"
            "–í–∞—à –∫–ª—é—á *{email}* –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ *7 –¥–Ω–µ–π*.\n"
            "–ü—Ä–æ–¥–ª–∏—Ç–µ –µ–≥–æ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN! üîê\n\n"
            "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ê–∫–∫–∞—É–Ω—Ç / –ö–ª—é—á–∏¬ª.",
            1
        ),
        3: (
            "‚ö†Ô∏è *–û—Å—Ç–∞–ª–æ—Å—å 3 –¥–Ω—è!*\n\n"
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ *{email}* –ø–æ—á—Ç–∏ –ø–æ–¥–æ—à—ë–ª –∫ –∫–æ–Ω—Ü—É.\n"
            "–ü—Ä–æ–¥–ª–∏—Ç–µ –µ–≥–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –≤—Å—ë –ø—Ä–æ–¥–æ–ª–∂–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–µ—Ä–µ–±–æ–µ–≤. üîÑ\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Ä–∞–∑–¥–µ–ª ¬´–ü–æ–º–æ—â—å¬ª –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º.",
            2
        ),
        1: (
            "‚è≥ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å!*\n\n"
            "–ó–∞–≤—Ç—Ä–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ *{email}*.\n"
            "–£—Å–ø–µ–π—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. ‚ö°Ô∏è\n\n"
            "–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ–≥–æ –≤ –ø–∞—Ä—É –Ω–∞–∂–∞—Ç–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ê–∫–∫–∞—É–Ω—Ç / –ö–ª—é—á–∏¬ª.",
            3
        ),
        0: (
            "‚ùå *–ö–ª—é—á –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n"
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ *{email}* –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ–≥–æ –∏–ª–∏ –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ. üîÅ\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º VPN ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! ‚ù§Ô∏è",
            4
        )
    }


    for day, (text, level) in messages.items():
        if (days_left == day or (day == 0 and days_left <= 0)) and notified_level < level:
            if day == 0:
                deactivate_key(key_id)
            message = text.format(email=email)
            await bot.send_message(chat_id=tg_id, text=message, parse_mode="Markdown")
            update_notified_level(key_id, level)
            log_message = f"[üì®] TG ID {tg_id} ‚Äî {message}"
            if ADMIN_TG_ID:
                try:
                    await bot.send_message(chat_id=ADMIN_TG_ID, text=log_message)
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")
            break


async def check_bonuses_once(context):
    bot = context.bot
    bonuses = get_all_active_bonuses()
    now = int(datetime.now().timestamp())
    for bonus in bonuses:
        days_left = math.ceil((bonus["expiry_time"] - now) / 86400)
        if bonus["expiry_time"] <= now:
            expire_bonus(bonus["id"])
            continue
        if bonus["days"] <= 0:
            continue
        if days_left in (7, 1):
            message = (
                f"üéÅ –í–∞—à –±–æ–Ω—É—Å +{bonus['days']} –¥–Ω. –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω."
            )
            try:
                await bot.send_message(chat_id=bonus["tg_id"], text=message)
                if ADMIN_TG_ID:
                    await bot.send_message(chat_id=ADMIN_TG_ID, text=f"[–ë–æ–Ω—É—Å] TG ID {bonus['tg_id']} ‚Äî {message}")
            except Exception:
                pass


async def backup_db_once(context):
    bot = context.bot
    now = datetime.now().strftime("%H:%M:%S")
    print(f"[{now}] üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    if ADMIN_TG_ID:
        try:
            await bot.send_message(chat_id=ADMIN_TG_ID, text="üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")

    base_dir = Path(__file__).parent
    db_path = base_dir / "vpn_bot.db"
    backups_dir = base_dir / "backups"
    backups_dir.mkdir(exist_ok=True)

    if db_path.exists():
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = backups_dir / f"vpn_bot_{timestamp}.db"
        shutil.copy2(db_path, backup_file)
        msg = f"üìÅ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {backup_file}"
        print(msg)
        if ADMIN_TG_ID:
            try:
                await bot.send_message(chat_id=ADMIN_TG_ID, text=msg)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")
    else:
        msg = f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}"
        print(msg)
        if ADMIN_TG_ID:
            try:
                await bot.send_message(chat_id=ADMIN_TG_ID, text=msg)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")
