from telegram import Update
from telegram.ext import CallbackContext
from db import (
    get_or_create_user,
    assign_referrer,
    create_bonus,
    get_user_referrer,
    increment_paid_referrals,
    count_successful_payments,
    get_user_active_bonuses,
    mark_bonus_used,
    get_bonus,
    get_key_by_id,
    update_key_expiry,
    reset_notified_level,
    get_key_owner,
)
from services.extend_service import extend_key

SIGNUP_REFERRER_BONUS = 7
SIGNUP_USER_BONUS = 2
PAYMENT_BONUS_DAYS = 7
MILESTONE_BONUSES = {3: 10, 5: 15}


def generate_referral_link(bot_username: str, tg_id: str) -> str:
    return f"https://t.me/{bot_username}?start={tg_id}"


async def process_signup(update: Update, context: CallbackContext, ref_tg_id: str, user_id: int):
    ref_user_id, _ = get_or_create_user(ref_tg_id)
    if assign_referrer(user_id, ref_user_id):
        create_bonus(ref_user_id, SIGNUP_REFERRER_BONUS, "referral_signup")
        create_bonus(user_id, SIGNUP_USER_BONUS, "referral_signup")
        try:
            await context.bot.send_message(ref_tg_id, "üéâ –í–∞—à –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –ë–æ–Ω—É—Å +7 –¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception:
            pass
        try:
            await update.message.reply_text("üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ (+2 –¥–Ω—è)")
        except Exception:
            pass


async def process_first_payment(context: CallbackContext, user_id: int, amount: float):
    if amount < 100:
        return
    if count_successful_payments(user_id) != 1:
        return
    referrer_id = get_user_referrer(user_id)
    if not referrer_id:
        return
    create_bonus(referrer_id, PAYMENT_BONUS_DAYS, "referral_payment")
    create_bonus(user_id, PAYMENT_BONUS_DAYS, "first_payment")
    count = increment_paid_referrals(referrer_id)
    bonus_days = MILESTONE_BONUSES.get(count)
    if bonus_days:
        create_bonus(referrer_id, bonus_days, f"milestone_{count}")
    bot = context.bot
    try:
        await bot.send_message(chat_id=str(referrer_id), text="üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É. –ë–æ–Ω—É—Å +7 –¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception:
        pass
    try:
        await bot.send_message(chat_id=str(user_id), text="üéÅ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å +7 –¥–Ω–µ–π")
    except Exception:
        pass


def format_bonus(bonus):
    from datetime import datetime
    expiry = datetime.fromtimestamp(bonus[3]).strftime('%d.%m.%Y')
    return f"ID {bonus[0]} ‚Äî +{bonus[1]} –¥–Ω. –¥–æ {expiry} ({bonus[2]})"


async def list_bonuses(update: Update, context: CallbackContext):
    tg_id = str(update.effective_user.id)
    user_id, _ = get_or_create_user(tg_id)
    bonuses = get_user_active_bonuses(user_id)
    if not bonuses:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤.")
        return
    text = "–í–∞—à–∏ –±–æ–Ω—É—Å—ã:\n" + "\n".join(format_bonus(b) for b in bonuses)
    text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /apply_bonus <bonus_id> <key_id>"
    await update.message.reply_text(text)


async def apply_bonus(update: Update, context: CallbackContext):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /apply_bonus <bonus_id> <key_id>")
        return
    try:
        bonus_id = int(args[0])
        key_id = int(args[1])
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    tg_id = str(update.effective_user.id)
    user_id, _ = get_or_create_user(tg_id)
    bonus = get_bonus(bonus_id)
    from datetime import datetime
    now = int(datetime.now().timestamp())
    if not bonus or bonus[1] != user_id or bonus[5] != 'active' or bonus[4] <= now:
        await update.message.reply_text("–ë–æ–Ω—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    owner = get_key_owner(key_id)
    if owner != user_id:
        await update.message.reply_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    key = get_key_by_id(key_id)
    if not key:
        await update.message.reply_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    email, _, expiry_ms, client_id, active = key
    result = extend_key(email, client_id, active, expiry_ms, bonus[2])
    if result:
        update_key_expiry(key_id, result)
        reset_notified_level(key_id)
        mark_bonus_used(bonus_id)
        await update.message.reply_text(f"‚úÖ –ë–æ–Ω—É—Å –ø—Ä–∏–º–µ–Ω—ë–Ω, –∫–ª—é—á –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {bonus[2]} –¥–Ω–µ–π")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏")

