from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from datetime import datetime
from db import (
    get_or_create_user,
    assign_referrer,
    create_bonus,
    get_user_referrer,
    increment_paid_referrals,
    get_bonus_balance,
    get_user_active_bonuses,
    get_user_bonuses,
    use_all_bonuses,
    get_all_keys,
    get_key_by_id,
    update_key_expiry,
    reset_notified_level,
    get_key_owner,
    has_bonus,
)
from services.extend_service import extend_key

SIGNUP_REFERRER_BONUS = 3
SIGNUP_USER_BONUS = 3
PURCHASE_REFERRER_PERCENT = 0.2
PAYMENT_BONUS_TIERS = {250: 15, 100: 7}
MILESTONE_BONUSES = {3: 10, 5: 15}

REASON_TEXTS = {
    "signup_owner": "–∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞",
    "signup_user": "–∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ",
    "purchase_referrer": "–∑–∞ –ø–æ–∫—É–ø–∫—É –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º",
    "payment_100": "–∑–∞ –æ–ø–ª–∞—Ç—É –æ—Ç 100‚ÇΩ",
    "payment_250": "–∑–∞ –æ–ø–ª–∞—Ç—É –æ—Ç 250‚ÇΩ",
    "milestone_3": "–∑–∞ 3 –ø–ª–∞—Ç—è—â–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞",
    "milestone_5": "–∑–∞ 5 –ø–ª–∞—Ç—è—â–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
}


def generate_referral_link(bot_username: str, tg_id: str) -> str:
    return f"https://t.me/{bot_username}?start={tg_id}"


async def process_signup(update: Update, context: CallbackContext, ref_tg_id: str, user_id: int):
    ref_user_id, _ = get_or_create_user(ref_tg_id)
    if assign_referrer(user_id, ref_user_id):
        create_bonus(ref_user_id, SIGNUP_REFERRER_BONUS, "signup_owner")
        create_bonus(user_id, SIGNUP_USER_BONUS, "signup_user")
        try:
            await context.bot.send_message(
                ref_tg_id,
                "üéâ –í–∞—à –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +3 –¥–Ω—è.",
            )
        except Exception:
            pass
        try:
            await update.message.reply_text(
                "üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +3 –¥–Ω—è –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!",
            )
        except Exception:
            pass


async def process_purchase(context: CallbackContext, user_id: int, days: int, price: int):
    referrer_id = get_user_referrer(user_id)

    if referrer_id:
        ref_days = max(1, int(days * PURCHASE_REFERRER_PERCENT))
        create_bonus(referrer_id, ref_days, "purchase_referrer")

        if not has_bonus(user_id, "first_paid"):
            create_bonus(user_id, 0, "first_paid")
            count = increment_paid_referrals(referrer_id)
            bonus_days = MILESTONE_BONUSES.get(count)
            if bonus_days:
                create_bonus(referrer_id, bonus_days, f"milestone_{count}")

    for threshold, bonus in sorted(PAYMENT_BONUS_TIERS.items(), reverse=True):
        if price >= threshold and not has_bonus(user_id, f"payment_{threshold}"):
            create_bonus(user_id, bonus, f"payment_{threshold}")
            break



async def list_bonuses(update: Update, context: CallbackContext):
    tg_id = str(update.effective_user.id)
    user_id, _ = get_or_create_user(tg_id)
    balance = get_bonus_balance(user_id)
    bonuses = get_user_active_bonuses(user_id)
    lines = []
    for _, days, reason, expiry in bonuses:
        reason_text = REASON_TEXTS.get(reason, reason)
        exp = datetime.fromtimestamp(expiry).strftime("%d.%m")
        lines.append(f"+{days} –¥–Ω. ‚Äî {reason_text} (–¥–æ {exp})")

    history = "\n".join(lines) if lines else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤."

    text = f"*–ú–æ–∏ –±–æ–Ω—É—Å—ã:*\n{history}\n\n*–ë–∞–ª–∞–Ω—Å:* {balance} –¥–Ω."

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="referral")]]
    if balance:
        keyboard.insert(0, [InlineKeyboardButton("‚ûï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="use_bonus")])

    markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=markup, parse_mode="Markdown")
        await update.callback_query.answer()
    else:
        await update.message.reply_text(text, reply_markup=markup, parse_mode="Markdown")


async def choose_bonus_key(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    tg_id = str(query.from_user.id)
    user_id, _ = get_or_create_user(tg_id)
    balance = get_bonus_balance(user_id)
    if balance <= 0:
        await query.edit_message_text("–ë–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_bonuses")]]))
        return
    keys = get_all_keys(user_id)
    if not keys:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_bonuses")]]))
        return
    keyboard = []
    for key_id, email, *_ in keys:
        keyboard.append([InlineKeyboardButton(email, callback_data=f"apply_bonus_{key_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_bonuses")])
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def apply_bonus_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    key_id = int(query.data.split("_")[2])
    tg_id = str(query.from_user.id)
    user_id, _ = get_or_create_user(tg_id)
    days = use_all_bonuses(user_id)
    if days <= 0:
        await query.edit_message_text("–ë–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç.")
        return
    owner = get_key_owner(key_id)
    if owner != user_id:
        await query.edit_message_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    key = get_key_by_id(key_id)
    if not key:
        await query.edit_message_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    email, _, expiry_ms, client_id, active = key
    result = extend_key(email, client_id, active, expiry_ms, days)
    if result:
        update_key_expiry(key_id, result)
        reset_notified_level(key_id)
        await query.edit_message_text(
            f"‚úÖ –ë–æ–Ω—É—Å—ã (+{days} –¥–Ω.) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back")]]),
        )
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏.")


async def referral_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    tg_id = str(query.from_user.id)
    link = generate_referral_link(context.bot.username, tg_id)

    keyboard = [
        [InlineKeyboardButton("üéÅ –ú–æ–∏ –±–æ–Ω—É—Å—ã", callback_data="show_bonuses")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back")],
    ]

    text = (
        "*–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n"
        "‚Ä¢ +3 –¥–Ω—è –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n"
        "‚Ä¢ +20% –¥–Ω–µ–π –æ—Ç –∫–∞–∂–¥–æ–π –µ–≥–æ –ø–æ–∫—É–ø–∫–∏\n"
        "‚Ä¢ +10 –¥–Ω–µ–π –∑–∞ 3 –ø–ª–∞—Ç—è—â–∏—Ö –¥—Ä—É–≥–∞, +15 –¥–Ω–µ–π –∑–∞ 5\n\n"
        f"üîó *–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:*\n`{link}`"
    )

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")


async def show_bonuses(update: Update, context: CallbackContext):
    await list_bonuses(update, context)

