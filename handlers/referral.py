from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from datetime import datetime
import time
from db import (
    get_or_create_user,
    assign_referrer,
    create_bonus,
    get_user_referrer,
    increment_paid_referrals,
    get_bonus_balance,
    get_user_active_bonuses,
    get_user_bonuses,
    use_all_bonuses,
    get_all_keys,
    get_key_by_id,
    update_key_expiry,
    reset_notified_level,
    get_key_owner,
    has_bonus,
    get_user_tg,
)
from services.extend_service import extend_key

SIGNUP_REFERRER_BONUS = 3
SIGNUP_USER_BONUS = 3
PURCHASE_REFERRER_PERCENT = 0.2
MILESTONE_BONUSES = {3: 10, 5: 15}

REASON_TEXTS = {
    "signup_owner": "üéâ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞",
    "signup_user": "üéÅ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ",
    "purchase_referrer": "üí∏ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º",
    "milestone_3": "üèÖ –∑–∞ 3 –ø–ª–∞—Ç—è—â–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞",
    "milestone_5": "ü•á –∑–∞ 5 –ø–ª–∞—Ç—è—â–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
}

BONUS_MESSAGES = {
    "signup_owner": "ü•≥ –í–∞—à –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{days} –¥–Ω.",
    "signup_user": "üéÅ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ +{days} –¥–Ω.",
    "purchase_referrer": "üí∏ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É.\n–ù–∞—á–∏—Å–ª–µ–Ω–æ +{days} –¥–Ω.",
    "milestone_3": "üèÖ –£ –≤–∞—Å —É–∂–µ 3 –ø–ª–∞—Ç—è—â–∏—Ö –¥—Ä—É–≥–∞!\n–ü–æ–ª—É—á–∞–µ—Ç–µ +{days} –¥–Ω.",
    "milestone_5": "ü•á –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞! 5 –¥—Ä—É–∑–µ–π –æ–ø–ª–∞—Ç–∏–ª–∏.\n+{days} –¥–Ω. –≤ –ø–æ–¥–∞—Ä–æ–∫!",
}

async def notify_bonus(context: CallbackContext, tg_id: str, days: int, reason: str):
    msg = BONUS_MESSAGES.get(reason)
    if not msg or days <= 0:
        return
    try:
        await context.bot.send_message(chat_id=tg_id, text=msg.format(days=days))
    except Exception:
        pass


def generate_referral_link(bot_username: str, tg_id: str) -> str:
    return f"https://t.me/{bot_username}?start={tg_id}"


async def process_signup(update: Update, context: CallbackContext, ref_tg_id: str, user_id: int):
    ref_user_id, _ = get_or_create_user(ref_tg_id)
    if assign_referrer(user_id, ref_user_id):
        create_bonus(ref_user_id, SIGNUP_REFERRER_BONUS, "signup_owner")
        create_bonus(user_id, SIGNUP_USER_BONUS, "signup_user")
        await notify_bonus(context, ref_tg_id, SIGNUP_REFERRER_BONUS, "signup_owner")
        await notify_bonus(context, str(update.effective_user.id), SIGNUP_USER_BONUS, "signup_user")


async def process_purchase(context: CallbackContext, user_id: int, days: int, price: int):
    referrer_id = get_user_referrer(user_id)

    if referrer_id:
        ref_days = max(1, int(days * PURCHASE_REFERRER_PERCENT))
        create_bonus(referrer_id, ref_days, "purchase_referrer")
        tg_id = get_user_tg(referrer_id)
        if tg_id:
            await notify_bonus(context, tg_id, ref_days, "purchase_referrer")

        if not has_bonus(user_id, "first_paid"):
            create_bonus(user_id, 0, "first_paid")
            count = increment_paid_referrals(referrer_id)
            bonus_days = MILESTONE_BONUSES.get(count)
            if bonus_days:
                create_bonus(referrer_id, bonus_days, f"milestone_{count}")
                if tg_id:
                    await notify_bonus(context, tg_id, bonus_days, f"milestone_{count}")

async def list_bonuses(update: Update, context: CallbackContext):
    tg_id = str(update.effective_user.id)
    user_id, _ = get_or_create_user(tg_id)
    balance = get_bonus_balance(user_id)
    bonuses = get_user_active_bonuses(user_id)
    lines = []
    for _, days, reason, expiry in bonuses:
        if days <= 0:
            continue
        reason_text = REASON_TEXTS.get(reason, reason.replace('_', '\\_'))
        exp = datetime.fromtimestamp(expiry).strftime("%d.%m")
        lines.append(f"+{days} –¥–Ω. ‚Äî {reason_text} (–¥–æ {exp})")

    history = "\n".join(lines) if lines else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤."

    text = (
        "üéÅ *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã:*\n\n"
        f"{history}\n\n"
        f"üí∞ *–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:* *{balance} –¥–Ω.*\n\n"
        "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–Ω—É—Å—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∫ VPN."
    )

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="referral")]]
    if balance:
        keyboard.insert(0, [InlineKeyboardButton("‚ûï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="use_bonus")])

    markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=markup, parse_mode="Markdown")
        await update.callback_query.answer()
    else:
        await update.message.reply_text(text, reply_markup=markup, parse_mode="Markdown")


async def choose_bonus_key(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    tg_id = str(query.from_user.id)
    user_id, _ = get_or_create_user(tg_id)
    balance = get_bonus_balance(user_id)
    if balance <= 0:
        await query.edit_message_text("–ë–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_bonuses")]]))
        return
    keys = get_all_keys(user_id)
    if not keys:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_bonuses")]]))
        return
    keyboard = []
    for key_id, email, expiry, active in keys:
        days_left = max(0, (expiry - int(time.time())) // 86400)
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if active else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
        text = f"{email} ‚Äî {days_left} –¥–Ω. {status}"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"apply_bonus_{key_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_bonuses")])
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def apply_bonus_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    key_id = int(query.data.split("_")[2])
    tg_id = str(query.from_user.id)
    user_id, _ = get_or_create_user(tg_id)
    days = use_all_bonuses(user_id)
    if days <= 0:
        await query.edit_message_text("–ë–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç.")
        return
    owner = get_key_owner(key_id)
    if owner != user_id:
        await query.edit_message_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    key = get_key_by_id(key_id)
    if not key:
        await query.edit_message_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    email, _, expiry, client_id, active, inbound_id = key
    if inbound_id == 1:
        await query.edit_message_text("–°—Ç–∞—Ä—ã–π –∫–ª—é—á –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–∏—Ç—å, –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞ –Ω–æ–≤—ã–π.")
        return
    result = extend_key(email, client_id, active, expiry, days, inbound_id=2)
    if result:
        update_key_expiry(key_id, result)
        reset_notified_level(key_id)
        await query.edit_message_text(
            f"‚úÖ –ë–æ–Ω—É—Å—ã (+{days} –¥–Ω.) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back")]]),
        )
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏.")


async def referral_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    tg_id = str(query.from_user.id)
    link = generate_referral_link(context.bot.username, tg_id)

    keyboard = [
        [InlineKeyboardButton("üéÅ –ú–æ–∏ –±–æ–Ω—É—Å—ã", callback_data="show_bonuses")],
        [InlineKeyboardButton("üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/share/url?url={link}")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back")],
    ]

    text = (
        "üèÜ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n"
        "–ó–æ–≤–∏ –¥—Ä—É–∑–µ–π ‚Äî –∏ –ø–æ–ª—É—á–∏ –∫–ª–∞—Å—Å–Ω—ã–µ –±–æ–Ω—É—Å—ã:\n\n"
        "‚Ä¢ üéâ +3 –¥–Ω—è ‚Äî –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥—Ä—É–≥–∞\n"
        "‚Ä¢ üí∏ +20% –±–æ–Ω—É—Å–∞ –æ—Ç –µ–≥–æ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫—É–ø–∫–∞ –Ω–∞ 30\u202f–¥–Ω ‚Üí —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 6\u202f–¥–Ω, –Ω–∞ 90\u202f ‚Üí 18\u202f–¥–Ω)\n"
        "‚Ä¢ üèÖ +10 –¥–Ω–µ–π ‚Äî –∑–∞ 3 –ø–ª–∞—Ç—è—â–∏—Ö –¥—Ä—É–≥–∞\n"
        "‚Ä¢ ü•á +15 –¥–Ω–µ–π ‚Äî –∑–∞ 5 –ø–ª–∞—Ç—è—â–∏—Ö\n\n"
        f"üîó *–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:* `{link}`\n\n"
        "üëâ –ù–∞–∂–º–∏ \u00ab–ü–æ–¥–µ–ª–∏—Ç—å—Å—è\u00bb, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –±–æ–Ω—É—Å—ã!"
    )

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")


async def show_bonuses(update: Update, context: CallbackContext):
    await list_bonuses(update, context)

