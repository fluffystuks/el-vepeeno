from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from db import get_or_create_user, add_key, is_trial_used, mark_trial_used
from services.key_service import generate_key
import datetime

PURCHASE_DISABLED_NOTICE = (
    "üöß –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
    "–ú—ã —Å–æ–æ–±—â–∏–º, –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç —Ä–∞–±–æ—Ç—É."
)


async def connect_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    tg_id = str(query.from_user.id)
    user_id, _ = get_or_create_user(tg_id)

    trial_used = is_trial_used(user_id)

    keyboard = []

    # üü¢ –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω

    if not trial_used:
        keyboard.append([InlineKeyboardButton("üÜì –ü—Ä–æ–±–Ω—ã–π ‚Äî 3 –¥–Ω—è", callback_data='trial')])

    keyboard += [
        [InlineKeyboardButton("üí≥ 100 RUB ‚Äî 1 –º–µ—Å—è—Ü", callback_data='100rub')],
        [InlineKeyboardButton("üí≥ 250 RUB ‚Äî 3 –º–µ—Å—è—Ü–∞", callback_data='250rub')],
        [InlineKeyboardButton("üí≥ 500 RUB ‚Äî 6 –º–µ—Å—è—Ü–µ–≤", callback_data='500rub')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back')]
    ]

    markup = InlineKeyboardMarkup(keyboard)
    balance = int(get_or_create_user(tg_id)[1])
    await query.edit_message_text(
        "üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n\n"
        f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* *{balance} RUB*\n\n"
        "‚ö†Ô∏è –û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ —Ç–∞—Ä–∏—Ñ—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ.",
        parse_mode='Markdown',
        reply_markup=markup
    )


async def tariff_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    choice = query.data
    tg_id = str(query.from_user.id)
    user_id, balance = get_or_create_user(tg_id)

    prices = {'trial': 0, '100rub': 100, '250rub': 250, '500rub': 500}
    durations = {'trial': 3, '100rub': 30, '250rub': 90, '500rub': 180}

    if choice == 'back':
        from handlers.start import start
        await start(update, context)
        return

    if choice == 'trial':
        if is_trial_used(user_id):
            await query.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π!", show_alert=True)
            return

        result = generate_key(user_id, durations[choice], tg_id)
        if isinstance(result, dict):
            add_key(
                user_id,
                result['email'],
                result['link'],
                result['expiry_time'] // 1000,
                result['client_id'],
                1,
            )
            mark_trial_used(user_id)

            expiry_date = datetime.datetime.fromtimestamp(result['expiry_time'] // 1000).strftime('%d.%m.%Y')

            await query.edit_message_text(
                f"üéâ *–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
                f"üìß *Email:* `{result['email']}`\n"
                f"üîë *–ö–ª—é—á:*\n`{result['link']}`\n\n"
                f"‚è≥ *–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* *{expiry_date}*\n\n"
                "‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:* –¥–æ *2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ*.\n\n"
                "üìú –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
                )
            )
        else:
            await query.edit_message_text(f"{result}")
        return

    if choice in prices:
        await query.answer(PURCHASE_DISABLED_NOTICE, show_alert=True)
        return

    await query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
