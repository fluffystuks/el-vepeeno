from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from db import (
    get_or_create_user, has_pending_payment, cancel_pending_payment,
    save_payment, get_last_payment_id, update_payment_status,
    update_balance, get_payment_amount
)
from services.payment_service import create_payment, check_payment

PAYMENT_AMOUNT = 1

# ================================================
# /pay ‚Äî –∂–¥—ë—Ç —Å—É–º–º—É + —Å—Ç–∞–≤–∏—Ç –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—É —á–µ—Ä–µ–∑ JobQueue
# ================================================
async def pay_handler(update: Update, context: CallbackContext) -> int:
    if update.message:
        user_id, _ = get_or_create_user(str(update.message.from_user.id))
        chat_id = update.message.chat_id
    elif update.callback_query:
        user_id, _ = get_or_create_user(str(update.callback_query.from_user.id))
        chat_id = update.callback_query.message.chat_id
        await update.callback_query.answer()
    else:
        return ConversationHandler.END

    if has_pending_payment(user_id):
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data="cancel_payment")]]
        markup = InlineKeyboardMarkup(keyboard)
        text = (
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂!\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        if update.message:
            await update.message.reply_text(text, reply_markup=markup)
        else:
            await update.callback_query.message.reply_text(text, reply_markup=markup)
        return ConversationHandler.END

    if update.message:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω. 50 RUB):")
    else:
        await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω. 50 RUB):")

    # üü¢ –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã ‚Äî –¥–∞—ë–º –∏–º—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–Ω—è—Ç—å
    context.job_queue.run_once(
        cancel_waiting_amount,
        120,
        chat_id=chat_id,
        name=f"cancel_{chat_id}"
    )

    return PAYMENT_AMOUNT

# ================================================
# –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã
# ================================================
async def cancel_waiting_amount(context: CallbackContext):
    context.chat_data["expired"] = True  # —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥
    await context.bot.send_message(
        context.job.chat_id,
        "‚è∞ –í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /pay. –ï—Å–ª–∏ –∂–µ /pay –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ª—é–±–æ–µ —á–∏—Å–ª–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —á–∏—Å–ª–æ."
    )


# ================================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—É–º–º—ã + –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
# ================================================
async def process_payment_amount(update: Update, context: CallbackContext) -> int:
    if context.chat_data.get("expired"):
        await update.message.reply_text(
            "‚è∞ –í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /pay. –ï—Å–ª–∏ –∂–µ /pay –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ª—é–±–æ–µ —á–∏—Å–ª–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —á–∏—Å–ª–æ."
        )
        return ConversationHandler.END
    
    try:
        amount = float(update.message.text)
        if amount < 50:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 50 RUB.")
            return PAYMENT_AMOUNT

        user_id, _ = get_or_create_user(str(update.message.from_user.id))
        url, payment_id = create_payment(user_id, amount)

        if not url:
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.")
            return PAYMENT_AMOUNT

        save_payment(user_id, payment_id, amount)

        # üü¢ –°–Ω–∏–º–∞–µ–º –∑–∞–¥–∞—á—É —Ç–∞–π–º–µ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –≤–≤—ë–ª –≤–æ–≤—Ä–µ–º—è
        for job in context.job_queue.jobs():
            if job.name == f"cancel_{update.effective_chat.id}":
                job.schedule_removal()

        keyboard = [
            [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data="check_payment")]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã {amount} RUB:\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂ "
            "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check_payment ‚Äî —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏ –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å!"
        ,
            reply_markup=markup
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return PAYMENT_AMOUNT

# ================================================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
# ================================================
async def check_payment_handler(update: Update, context: CallbackContext):
    if update.callback_query:
        user_id, balance = get_or_create_user(str(update.callback_query.from_user.id))
        await update.callback_query.answer()
        target = update.callback_query.message
    else:
        user_id, balance = get_or_create_user(str(update.message.from_user.id))
        target = update.message

    payment_id = get_last_payment_id(user_id)

    if not payment_id:
        await target.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
        return

    status = check_payment(payment_id)
    if status == "succeeded":
        update_payment_status(payment_id, "succeeded")
        amount = get_payment_amount(payment_id)
        new_balance = balance + amount
        update_balance(user_id, new_balance)

        await target.reply_text(
            f"‚úÖ *–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!*\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} RUB.\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} RUB.",
            parse_mode="Markdown"
        )

    elif status == "pending":
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data="cancel_payment")]]
        markup = InlineKeyboardMarkup(keyboard)
        await target.reply_text(
            f"‚è≥ *–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.*\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–ª–∞—Ç—ë–∂ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif status == "canceled":
        await target.reply_text(
            f"‚ùå *–ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.*\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ /pay.",
            parse_mode="Markdown"
        )

    else:
        await target.reply_text(
            f"‚ùå *–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:* `{status}`\n"
            f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ü–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="Markdown"
        )

# ================================================
# –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤—Ä—É—á–Ω—É—é
# ================================================
async def cancel_payment_handler(update: Update, context: CallbackContext):
    if update.callback_query:
        user_id, _ = get_or_create_user(str(update.callback_query.from_user.id))
        cancel_pending_payment(user_id)
        await update.callback_query.answer("‚úÖ –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω!")
        await update.callback_query.edit_message_text(
            "‚úÖ –í–∞—à –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ /pay."
        )
    elif update.message:
        user_id, _ = get_or_create_user(str(update.message.from_user.id))
        cancel_pending_payment(user_id)
        await update.message.reply_text(
            "‚úÖ –í—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ /pay."
        )