from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackContext, ConversationHandler
from db import (
    get_or_create_user, has_pending_payment,
    save_payment, get_last_payment_id, update_payment_status,
    update_balance, get_payment_amount, get_pending_payment_ids
)
from services.payment_service import create_payment, check_payment, cancel_payment
from yookassa import Payment
from uuid import uuid4

PAYMENT_AMOUNT = 1

# ================================================
# /pay ‚Äî —Å—Ç–∞—Ä—Ç –æ–ø–ª–∞—Ç—ã
# ================================================
async def pay_handler(update: Update, context: CallbackContext) -> int:
    tg_id = str(update.effective_user.id)
    user_id, _ = get_or_create_user(tg_id)
    chat_id = update.effective_chat.id


    if has_pending_payment(user_id):
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data="cancel_payment")]
        ])

        if update.message:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂!\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=markup
            )
        else:
            await update.callback_query.message.reply_text(
                "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂!\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=markup
            )
        return ConversationHandler.END

    if update.message:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω. 50 RUB):")
    else:
        await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω. 50 RUB):")

    return PAYMENT_AMOUNT 


# ================================================
# –í–≤–æ–¥ —Å—É–º–º—ã
# ================================================
async def process_payment_amount(update: Update, context: CallbackContext) -> int:
    try:
        amount = float(update.message.text)
        if amount < 50:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 50 RUB.")
            return PAYMENT_AMOUNT

        tg_id = str(update.message.from_user.id)
        user_id, _ = get_or_create_user(tg_id)
        url, payment_id = create_payment(tg_id, amount)

        if not url:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.")
            return PAYMENT_AMOUNT

        save_payment(user_id, payment_id, amount)


        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data="check_payment")]
        ])

        await update.message.reply_text(
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã <b>{amount} RUB</b>:\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂</b>\n"
            "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/check_payment</code>.",
            parse_mode="HTML",
            reply_markup=markup
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return PAYMENT_AMOUNT

async def timeout_handler(update, context):
    await update.message.reply_text(
        "‚åõÔ∏è *–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /pay, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def cancel_handler(update, context):
    await update.message.reply_text(
        "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# ================================================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
# ================================================
async def check_payment_handler(update: Update, context: CallbackContext):
    tg_id = str(update.effective_user.id)
    user_id, balance = get_or_create_user(tg_id)
    target = update.callback_query.message if update.callback_query else update.message

    if update.callback_query:
        await update.callback_query.answer()

    payment_id = get_last_payment_id(user_id)
    if not payment_id:
        await target.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
        return

    status = check_payment(payment_id)
    if status == "waiting_for_capture":
        Payment.capture(payment_id, idempotency_key=uuid4())
        status = "succeeded"

    if status == "succeeded":
        update_payment_status(payment_id, "succeeded")
        amount = get_payment_amount(payment_id)
        new_balance = balance + amount
        update_balance(user_id, new_balance)

        markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back")]]
        )
        await target.reply_text(
            f"‚úÖ <b>–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª!</b>\n\n"
            f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: <b>{amount} RUB</b>\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance} RUB</b>\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Ä–≤–∏—Å–∞! ‚ù§Ô∏è",
            parse_mode="HTML",
            reply_markup=markup,
        )


    elif status == "pending":
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data="cancel_payment")]
        ])
        await target.reply_text(
            "‚è≥ <i>–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.</i>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–ª–∞—Ç—ë–∂.",
            parse_mode="HTML",
            reply_markup=markup
        )

    elif status == "canceled":
        await target.reply_text(
            "‚ùå <b>–ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.</b>\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ /pay.",
            parse_mode="HTML"
        )
    else:
        await target.reply_text(
            f"‚ùå <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{status}</code>\n"
            "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )

# ================================================
# –û—Ç–º–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
# ================================================
async def cancel_payment_handler(update: Update, context: CallbackContext):
    tg_id = str(update.effective_user.id)
    user_id, _ = get_or_create_user(tg_id)
    payment_ids = get_pending_payment_ids(user_id)
    for pid in payment_ids:
        cancel_payment(pid)

    if update.callback_query:
        await update.callback_query.answer("‚úÖ –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω!")
        await update.callback_query.edit_message_text(
            "‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ /pay."
        )
    elif update.message:
        await update.message.reply_text(
            "‚úÖ –í—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ /pay."
        )
