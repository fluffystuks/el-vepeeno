from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackContext, ConversationHandler
from db import (
    get_or_create_user, has_pending_payment, cancel_pending_payment,
    get_last_payment_id, update_payment_status,
    update_balance, get_payment_amount
)
from services.payment_service import check_payment

PAYMENT_AMOUNT = 1
PAYMENT_DISABLED_NOTICE = (
    "üöß *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.*\n\n"
    "–ú—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –æ–ø–ª–∞—Ç—É –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞."
)


# ================================================
# /pay ‚Äî —Å—Ç–∞—Ä—Ç –æ–ø–ª–∞—Ç—ã
# ================================================
async def pay_handler(update: Update, context: CallbackContext) -> int:
    tg_id = str(update.effective_user.id)
    user_id, _ = get_or_create_user(tg_id)
    target = update.callback_query.message if update.callback_query else update.message

    if has_pending_payment(user_id):
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data="cancel_payment")]
        ])
        await target.reply_text(
            PAYMENT_DISABLED_NOTICE
            + "\n\n–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ‚Äî –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∏–∂–µ.",
            parse_mode="Markdown",
            reply_markup=markup,
        )
        return ConversationHandler.END

    await target.reply_text(PAYMENT_DISABLED_NOTICE, parse_mode="Markdown")

    return ConversationHandler.END


# ================================================
# –í–≤–æ–¥ —Å—É–º–º—ã
# ================================================
async def process_payment_amount(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(PAYMENT_DISABLED_NOTICE, parse_mode="Markdown")
    return ConversationHandler.END


def _disabled_reply(update):
    return update.message.reply_text(
        PAYMENT_DISABLED_NOTICE,
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )


async def timeout_handler(update, context):
    await _disabled_reply(update)
    return ConversationHandler.END


async def cancel_handler(update, context):
    await _disabled_reply(update)
    return ConversationHandler.END


# ================================================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
# ================================================
async def check_payment_handler(update: Update, context: CallbackContext):
    tg_id = str(update.effective_user.id)
    user_id, balance = get_or_create_user(tg_id)
    target = update.callback_query.message if update.callback_query else update.message

    if update.callback_query:
        await update.callback_query.answer()

    payment_id = get_last_payment_id(user_id)
    if not payment_id:
        await target.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
        return

    status = check_payment(payment_id)
    if status == "succeeded":
        update_payment_status(payment_id, "succeeded")
        amount = get_payment_amount(payment_id)
        new_balance = balance + amount
        update_balance(user_id, new_balance)

        markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back")]]
        )
        await target.reply_text(
            f"‚úÖ <b>–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª!</b>\n\n"
            f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: <b>{amount} RUB</b>\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance} RUB</b>\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Ä–≤–∏—Å–∞! ‚ù§Ô∏è",
            parse_mode="HTML",
            reply_markup=markup,
        )

    elif status == "pending":
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data="cancel_payment")]
        ])
        await target.reply_text(
            "‚è≥ <i>–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.</i>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–ª–∞—Ç—ë–∂.",
            parse_mode="HTML",
            reply_markup=markup
        )

    elif status == "canceled":
        await target.reply_text(
            "‚ùå <b>–ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.</b>\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.",
            parse_mode="HTML"
        )
    else:
        await target.reply_text(
            f"‚ùå <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{status}</code>\n"
            "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )


async def cancel_payment_handler(update: Update, context: CallbackContext):
    tg_id = str(update.effective_user.id)
    user_id, _ = get_or_create_user(tg_id)
    cancel_pending_payment(user_id)

    if update.callback_query:
        await update.callback_query.answer("‚úÖ –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω!")
        await update.callback_query.edit_message_text(
            "‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω. –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π."
        )
    elif update.message:
        await update.message.reply_text(
            "‚úÖ –í—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π."
        )
