from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from db import get_or_create_user, get_all_keys, get_key_by_id
import datetime,time

# ===============================================
# üìÇ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
# ===============================================
async def account_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    tg_id = str(query.from_user.id)
    user_id, balance = get_or_create_user(tg_id)

    keys = get_all_keys(user_id)
    keyboard = []

    for key in keys:
        key_id, email, expiry_ms, active = key
        days_left = max(0, (expiry_ms // 1000 - int(time.time())) // 86400)
        expiry_date = datetime.datetime.fromtimestamp(expiry_ms // 1000).strftime('%d.%m.%Y')
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if active else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
        text = f"{email} ‚Äî {days_left} –¥–Ω. {status}"

        keyboard.append([InlineKeyboardButton(text, callback_data=f"key_{key_id}")])

    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back")])
    markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=(
            "üë§ *–í–∞—à–∏ –∫–ª—é—á–∏:*\n\n"
            f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} RUB\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å ‚è≥"
        ),
        parse_mode="Markdown",
        reply_markup=markup
    )


# ===============================================
# üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞: –¥–µ—Ç–∞–ª–∏ –∏ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
# ===============================================
async def show_key_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    callback_data = query.data  # key_123
    key_id = int(callback_data.split("_")[1])

    from db import get_key_by_id
    key = get_key_by_id(key_id)
    if not key:
        await query.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    email, link, expiry_ms, client_id, *_ = key

    expiry_date = datetime.datetime.fromtimestamp(expiry_ms // 1000).strftime('%d-%m-%Y %H:%M')

    text = (
        "üë§ *–î–µ—Ç–∞–ª–∏ –∫–ª—é—á–∞*\n\n"
        f"üìß *Email:* `{email}`\n"
        f"‚è≥ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ:* {expiry_date}\n"
        f"üîë *–í–∞—à –∫–ª—é—á:*\n`{link}`\n\n"
        "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ü–æ–º–æ—â—å."
    )

    keyboard = [
        [InlineKeyboardButton("‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π ‚Äî 100 RUB", callback_data=f"extend_{key_id}_30")],
        [InlineKeyboardButton("‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 60 –¥–Ω–µ–π ‚Äî 180 RUB", callback_data=f"extend_{key_id}_60")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="account")]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text,
        parse_mode="Markdown",
        reply_markup=markup
    )