from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from db import (
    get_or_create_user,
    get_all_keys,
    get_key_by_id,
    update_key_info,
)
import datetime,time

# ===============================================
# üìÇ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
# ===============================================
async def account_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    tg_id = str(query.from_user.id)
    user_id, balance = get_or_create_user(tg_id)

    keys = get_all_keys(user_id)
    keyboard = []

    for key in keys:
        key_id, email, expiry, active, _ = key
        days_left = max(0, (expiry - int(time.time())) // 86400)
        expiry_date = datetime.datetime.fromtimestamp(expiry).strftime('%d.%m.%Y')
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if active else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
        text = f"{email} ‚Äî {days_left} –¥–Ω. {status}"

        keyboard.append([InlineKeyboardButton(text, callback_data=f"key_{key_id}")])

    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back")])
    markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=(
            "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} RUB\n\n"
            "–ù–∏–∂–µ ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π.\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è ‚è≥\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º! ‚ù§Ô∏è"
        ),
        parse_mode="Markdown",
        reply_markup=markup
    )



async def show_key_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    callback_data = query.data  # key_123
    key_id = int(callback_data.split("_")[1])

    key = get_key_by_id(key_id)
    if not key:
        await query.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    email, link, expiry, client_id, active, inbound_id = key

    expiry_date = datetime.datetime.fromtimestamp(expiry).strftime('%d-%m-%Y %H:%M')

    text = (
        "üë§ *–î–µ—Ç–∞–ª–∏ –∫–ª—é—á–∞*\n\n"
        f"üìß *Email:* `{email}`\n"
        f"‚è≥ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ:* {expiry_date}\n"
        f"üîë *–í–∞—à –∫–ª—é—á:*\n`{link}`\n\n"
        "–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ VPN.\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –º—ã —Ä—è–¥–æ–º, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª *–ü–æ–º–æ—â—å* üí¨"
    )

    if inbound_id == 2:
        keyboard = [[InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"transfer_{key_id}")],
                   [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="account")]]
        text += (
            "\n\n‚ú® *–°–µ—Ä–≤–∏—Å —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É.*\n"
            "üîÑ –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤—è–∑–∏ –±–µ–∑ –ø–µ—Ä–µ–±–æ–µ–≤ –∏ –ø—Ä–æ–±–ª–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –∫–ª—é—á**.\n"
        )
    else:
        keyboard = [
            [InlineKeyboardButton("‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π ‚Äî 100 RUB", callback_data=f"extend_{key_id}_30")],
            [InlineKeyboardButton("‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 60 –¥–Ω–µ–π ‚Äî 180 RUB", callback_data=f"extend_{key_id}_60")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", callback_data=f"delete_{key_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="account")]
        ]
    markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text,
        parse_mode="Markdown",
        reply_markup=markup
    )


async def delete_key_prompt(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    key_id = int(query.data.split("_")[1])

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_{key_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"key_{key_id}")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á?", reply_markup=markup
    )


async def delete_key_confirm(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    key_id = int(query.data.split("_")[2])
    key = get_key_by_id(key_id)
    if not key:
        await query.edit_message_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    _, _, _, client_id, _, inbound_id = key
    from services.delete_service import delete_client
    from db import delete_key as db_delete

    if delete_client(client_id, inbound_id):
        db_delete(key_id)
        await query.edit_message_text(
            "‚úÖ –ö–ª—é—á —É–¥–∞–ª—ë–Ω.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="account")]]
            ),
        )
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"key_{key_id}")]]
            ),
        )


async def transfer_key_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    key_id = int(query.data.split("_")[1])
    record = get_key_by_id(key_id)
    if not record:
        await query.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    email, link, expiry, client_id, active, inbound_id = record
    if inbound_id != 2:
        await query.answer("–ö–ª—é—á —É–∂–µ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω.", show_alert=True)
        return

    from services.key_service import create_key_with_expiry
    result = create_key_with_expiry(expiry * 1000, inbound_id=1)
    if not isinstance(result, dict):
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫–ª—é—á.", show_alert=True)
        return

    update_key_info(key_id, result["email"], result["link"], result["client_id"], 1)

    from services.delete_service import delete_client

    context.job_queue.run_once(lambda ctx: delete_client(client_id, 2), 30*60)

    await query.edit_message_text(
        "‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω!\n\n"
        "‚è≥ –°—Ç–∞—Ä—ã–π –∫–ª—é—á –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑¬†30‚ÄØ–º–∏–Ω—É—Ç.\n\n"
        f"üîë –í–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á:\n`{result['link']}`\n\n"
        "üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ ‚Äî "
        "–æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –∏ –Ω–∞–¥—ë–∂–Ω–µ–µ –¥–∞–∂–µ —Ç–∞–º, "
        "–≥–¥–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="account")]]
        ),
    )